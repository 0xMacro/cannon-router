//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

// --------------------------------------------------------------------------------
// --------------------------------------------------------------------------------
// GENERATED CODE - do not edit manually!!
// This code was generated by the Synthetix router project and deployed with Cannon.
// Learn more: https://usecannon.com/learn/guides/router
// --------------------------------------------------------------------------------
// --------------------------------------------------------------------------------

contract BigRouter {
    error UnknownSelector(bytes4 sel);

    address immutable private _ROUTER_ADDRESS;

    constructor() {
        _ROUTER_ADDRESS = address(this);

        bytes4[] memory selectors;
        selectors = new bytes4[](26);
        selectors[0] = 0x29503d62;
        selectors[1] = 0xbfe393e0;
        selectors[2] = 0x2c2623c9;
        selectors[3] = 0x1e9ddca5;
        selectors[4] = 0xb324155e;
        selectors[5] = 0x5ec7d559;
        selectors[6] = 0x227ce614;
        selectors[7] = 0xa4453ec0;
        selectors[8] = 0x19d5c499;
        selectors[9] = 0x7623b710;
        selectors[10] = 0xd020173c;
        selectors[11] = 0xeda677d7;
        selectors[12] = 0x1cda9ff7;
        selectors[13] = 0xff84994c;
        selectors[14] = 0x05472705;
        selectors[15] = 0xc4795e7b;
        selectors[16] = 0x84655d30;
        selectors[17] = 0xe8c0f1b9;
        selectors[18] = 0x79363430;
        selectors[19] = 0x373beeac;
        selectors[20] = 0xee8326cd;
        selectors[21] = 0x118431f6;
        selectors[22] = 0xe9b1c576;
        selectors[23] = 0xc9036df3;
        selectors[24] = 0x552f3102;
        selectors[25] = 0x1907c755;
        _facets().push(Facet(_BIG_MODULE_ABI, selectors));

        _emitDiamondCutEvent();
    }

    address private constant _BIG_MODULE_ABI = 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266;

    fallback(bytes calldata cd) external payable returns (bytes memory) {
        // Lookup table: Function selector => implementation contract
        bytes4 sig4 = msg.sig;
        address implementation;

        assembly {
            let sig32 := shr(224, sig4)

            function findImplementation(sig) -> result {
                if lt(sig,0x79363430) {
                    if lt(sig,0x29503d62) {
                        switch sig
                        case 0x05472705 { result := _BIG_MODULE_ABI } // BigModuleABI.fn_o()
                        case 0x118431f6 { result := _BIG_MODULE_ABI } // BigModuleABI.fn_v()
                        case 0x1907c755 { result := _BIG_MODULE_ABI } // BigModuleABI.fn_z()
                        case 0x19d5c499 { result := _BIG_MODULE_ABI } // BigModuleABI.fn_i()
                        case 0x1cda9ff7 { result := _BIG_MODULE_ABI } // BigModuleABI.fn_m()
                        case 0x1e9ddca5 { result := _BIG_MODULE_ABI } // BigModuleABI.fn_d()
                        case 0x227ce614 { result := _BIG_MODULE_ABI } // BigModuleABI.fn_g()
                        leave
                    }
                    switch sig
                    case 0x29503d62 { result := _BIG_MODULE_ABI } // BigModuleABI.fn_a()
                    case 0x2c2623c9 { result := _BIG_MODULE_ABI } // BigModuleABI.fn_c()
                    case 0x373beeac { result := _BIG_MODULE_ABI } // BigModuleABI.fn_t()
                    case 0x552f3102 { result := _BIG_MODULE_ABI } // BigModuleABI.fn_y()
                    case 0x5ec7d559 { result := _BIG_MODULE_ABI } // BigModuleABI.fn_f()
                    case 0x7623b710 { result := _BIG_MODULE_ABI } // BigModuleABI.fn_j()
                    leave
                }
                if lt(sig,0xd020173c) {
                    switch sig
                    case 0x79363430 { result := _BIG_MODULE_ABI } // BigModuleABI.fn_s()
                    case 0x84655d30 { result := _BIG_MODULE_ABI } // BigModuleABI.fn_q()
                    case 0xa4453ec0 { result := _BIG_MODULE_ABI } // BigModuleABI.fn_h()
                    case 0xb324155e { result := _BIG_MODULE_ABI } // BigModuleABI.fn_e()
                    case 0xbfe393e0 { result := _BIG_MODULE_ABI } // BigModuleABI.fn_b()
                    case 0xc4795e7b { result := _BIG_MODULE_ABI } // BigModuleABI.fn_p()
                    case 0xc9036df3 { result := _BIG_MODULE_ABI } // BigModuleABI.fn_x()
                    leave
                }
                switch sig
                case 0xd020173c { result := _BIG_MODULE_ABI } // BigModuleABI.fn_k()
                case 0xe8c0f1b9 { result := _BIG_MODULE_ABI } // BigModuleABI.fn_r()
                case 0xe9b1c576 { result := _BIG_MODULE_ABI } // BigModuleABI.fn_w()
                case 0xeda677d7 { result := _BIG_MODULE_ABI } // BigModuleABI.fn_l()
                case 0xee8326cd { result := _BIG_MODULE_ABI } // BigModuleABI.fn_u()
                case 0xff84994c { result := _BIG_MODULE_ABI } // BigModuleABI.fn_n()
                leave
            }

            implementation := findImplementation(sig32)
        }

        if (implementation == address(0)) {
            // It's possible this contract is being called through yet another proxy. Call the router in order to make sure we have right data.
            if (address(this) != _ROUTER_ADDRESS) {
                (bool success, bytes memory result) = _ROUTER_ADDRESS.call(cd);
                if (success) {
                    return result;
                } else {
                    revert UnknownSelector(sig4);
                }
            } else {
                // Check for diamond compat call
                if (sig4 == 0x7a0ed627) {
                    return abi.encode(_facets());
                }
                if (sig4 == 0xadfca15e) {
                    (address facet) = abi.decode(cd[4:], (address));
                    return abi.encode(_facetFunctionSelectors(facet));
                }
                if (sig4 == 0x52ef6b2c) {
                    return abi.encode(_facetAddresses());
                }
                if (sig4 == 0xcdffacc6) {
                    (bytes4 sig) = abi.decode(cd[4:], (bytes4));
                    return abi.encode(_facetAddress(sig));
                }
                if (sig4 == 0x8cce96cb) {
                    return abi.encode(_emitDiamondCutEvent());
                }
            }
            revert UnknownSelector(sig4);
        }

        // Delegatecall to the implementation contract
        assembly {
            calldatacopy(0, 0, calldatasize())

            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)
            returndatacopy(0, 0, returndatasize())

            switch result
            case 0 {
                revert(0, returndatasize())
            }
            default {
                return(0, returndatasize())
            }
        }
    }

    struct Facet {
        address facetAddress;
        bytes4[] functionSelectors;
    }

    enum FacetCutAction {Add, Replace, Remove}
    // Add=0, Replace=1, Remove=2

    struct FacetCut {
        address facetAddress;
        FacetCutAction action;
        bytes4[] functionSelectors;
    }

    /// @notice Gets all facet addresses and their four byte function selectors.
    /// @return facets_ Facet
    function _facets() internal pure returns (Facet[] storage facets_) {
        bytes32 s = keccak256("Router.BigRouter");
        assembly {
            facets_.slot := s
        }
    }

    /// @notice Gets all the function selectors supported by a specific facet.
    /// @param _facet The facet address.
    /// @return facetFunctionSelectors_
    function _facetFunctionSelectors(address _facet) internal view returns (bytes4[] memory facetFunctionSelectors_) {
        Facet[] storage facets = _facets();
        for (uint256 i = 0;i < facets.length;i++) {
            if (facets[i].facetAddress == _facet) {
                return facets[i].functionSelectors;
            }
        }
    }

    /// @notice Get all the facet addresses used by a diamond.
    /// @return facetAddresses_
    function _facetAddresses() internal pure returns (address[] memory facetAddresses_) {
        facetAddresses_ = new address[](1);
        facetAddresses_[0] = _BIG_MODULE_ABI;
    }

    /// @notice Gets the facet that supports the given selector.
    /// @dev If facet is not found return address(0).
    /// @param _functionSelector The function selector.
    /// @return facetAddress_ The facet address.
    function _facetAddress(bytes4 _functionSelector) internal view returns (address facetAddress_) {
        Facet[] storage facets = _facets();
        for (uint256 i = 0;i < facets.length;i++) {
            for (uint256 j = 0;j < facets[i].functionSelectors.length;j++) {
                if (facets[i].functionSelectors[j] == _functionSelector) {
                    return facets[i].facetAddress;
                }
            }
        }
    }

    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);

    /// @notice Emits the cut events that would be emitted if this was actually a diamond
    function _emitDiamondCutEvent() internal returns (bool) {
        FacetCut[] memory cuts = new FacetCut[](1);
        cuts[0] = FacetCut(_BIG_MODULE_ABI, FacetCutAction.Add, _facetFunctionSelectors(_BIG_MODULE_ABI));
        emit DiamondCut(cuts, address(0), new bytes(0));
        return true;
    }
}
